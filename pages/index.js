"use client";
import { ApolloClient, InMemoryCache, HttpLink, ApolloProvider } from "@apollo/client";
import Head from "next/head";
import Link from "next/link";
import { GET_RESTAURANTS } from "../graphql/queries";
import styles from "../styles/Home.module.css";
import { Col, CardImg, Row, Input } from "reactstrap";
import React, { useState, useContext, useEffect } from "react";
import MyContext from '../components/context';
import { useRouter } from 'next/router';

const STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_API_URL || "http://localhost:1337";

const createApolloClient = () => {
  return new ApolloClient({
    link: new HttpLink({ uri: `${STRAPI_URL}/graphql`}),
    cache: new InMemoryCache(),
  });
};

const Home = ({ restaurants }) => {
  const { user, setUser, isAuthenticated } = useContext(MyContext);
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    if (!isAuthenticated) {
      router.push('/register');
    }
  }, [isAuthenticated]);

  if (!isAuthenticated) {
    return null;
  }

  const filteredRestaurants = restaurants.filter((restaurant) =>
  restaurant.attributes.name.toLowerCase().includes(searchTerm.toLowerCase())
);

  return (
    <ApolloProvider client={createApolloClient()}>
      <div className="container" >
        <Head>
          <title>My blog</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main>
          <h1 className={styles.title}>
            Browse from our many restaurants
          </h1>
          <Input
            type="text"
            placeholder="&#128269; Search for restaurants..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            style={{ width: '650px', margin: '0 auto', marginBottom: "10px" }}
          />
          
          
          <Row>
  {filteredRestaurants.length > 0 ? (
    filteredRestaurants.map((val, i) => (
      <Col key={i} xs="6" sm="4">
        <div>
          <Link key={i} href={val.attributes.urlSlug} legacyBehavior>
            <div>
              <a className="card" style={{ cursor: 'pointer' }}>
                <CardImg
                  top={true}
                  style={{ height: 200, objectFit: 'cover' }}
                  src={`${STRAPI_URL}${val.attributes.image.data.attributes.url}`}
                />
                <h3 style={{ fontWeight: 'bold', marginTop: '10px' }}>{val.attributes.name}</h3>
                <p>{val.attributes.description}</p>
              </a>
            </div>
          </Link>
        </div>
      </Col>
    ))
  ) : (
    <p>No matching restaurants found.</p>
  )}
</Row>
        </main>
        <style jsx>{`
          .container {
            padding-top: 20px;
          }

          .card {
            margin: 1rem;
            flex-basis: 45%;
            padding: 1.5rem;
            text-align: left;
            color: inherit;
            text-decoration: none;
            border: 1px solid #eaeaea;
            border-radius: 10px;
            transition:
              color 0.15s ease,
              border-color 0.15s ease;
          }

          .card:hover,
          .card:focus,
          .card:active {
            color: rgb(203, 24, 0);
            border-color: rgb(203, 24, 0);
          }

          .card h3 {
            margin: 0 0 1rem 0;
            font-size: 1.5rem;
          }

          .card p {
            margin: 0;
            font-size: 1.25rem;
            line-height: 1.5;
          }
        `}</style>
        <style jsx global>{`
  body {
    background-color: #e7f1fc; /* Set your desired background color here */
    margin: 0; /* Reset margin */
    font-family: 'Arial', sans-serif; /* Set your desired font family */
  }

  .container {
    padding-top: 20px;
  }
`}</style>
      </div>
    </ApolloProvider>
  );
};

export default Home;

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: `${STRAPI_URL}/graphql`,
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: GET_RESTAURANTS,
  });

  return {
    props: {
      restaurants: data.restaurants.data,
    },
  };
}